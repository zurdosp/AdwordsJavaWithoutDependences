package br.com.example.adwords.main;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Authenticator;
import java.net.MalformedURLException;
import java.net.PasswordAuthentication;
import java.net.ProtocolException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.net.ssl.HttpsURLConnection;

import br.com.example.google.adwords.AuthDataEnum;
import br.com.example.google.adwords.ProxyconfigEnum;
import br.com.example.google.adwords.QueryAdwordsDataEnum;

/**
 * Class to call Google Adword query, refreshing token, authenticating and executing query.
 * @author christian pacheco
 *
 */
public class AdWordsGetData {
	
	static Logger logger = Logger.getLogger(AdWordsGetData.class.getName());
	
	public static void main(String args[]) throws Exception {
		LogConfig.config(logger);
		new AdWordsGetData().doProcessAdwordCall();
	}

	
	public void doProcessAdwordCall() throws Exception {
		logger.log(Level.INFO, "AdWordsGetData Init");
		configProxy();
		AdWordsGetData adWordsGetData = new AdWordsGetData();
		String token = adWordsGetData.getGoogleAuthOk();
		logger.log(Level.INFO, "Adwords query return: \n" + new AdWordsGetData().doQueyAdwordsCall1(token));
		logger.log(Level.INFO, "AdWordsGetData Fim");
	}
	
	private String getGoogleAuthOk() throws Exception {
		logger.log(Level.INFO, "--- Looking for Google token updated ---");
		String urlAuthtoken = AuthDataEnum.URL_GOOGLE_REFRESH_TOKEN_POST.getValue()+"?"
				+ "client_id=" + AuthDataEnum.CLIENT_ID.getValue() + "&"
				+ "client_secret=" + AuthDataEnum.CLIENT_SECRET.getValue()+ "&"
				+ "refresh_token=" + AuthDataEnum.REFRESH_TOKEN.getValue()  +"&"
				+ "grant_type=" + AuthDataEnum.GRANT_TYPE.getValue();
		
		HttpsURLConnection conn = null;
		try {
			URL url = new URL(urlAuthtoken);
			conn = (HttpsURLConnection) url.openConnection();
			
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setInstanceFollowRedirects( false );
			
			conn = (HttpsURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setInstanceFollowRedirects( false );
			conn.setRequestMethod( "POST" );

			conn.setRequestProperty( "Content-Type", "application/x-www-form-urlencoded"); 
			conn.setRequestProperty("Accept", "application/json");
			conn.setRequestProperty( "charset", "utf-8");
			
			conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded"); 
			conn.setRequestProperty("Accept-Encoding", "text/xml"); 
			conn.setRequestProperty("User-Agent", "Apache-HttpClient/4.1.1"); 
			conn.setRequestProperty("Host", "www.googleapis.com"); 
			conn.setRequestProperty("Cache-Control", "no-cache"); 
			conn.setRequestProperty("Pragma", "no-cache"); 
			conn.setRequestProperty( "Content-Length", "2000");
			conn.setUseCaches(false);               
			conn.setRequestProperty("Connection", "Keep-Alive");
			conn.setRequestProperty("Proxy-Connection", "Keep-Alive");			
			
    		OutputStream os = conn.getOutputStream();
    		os.flush();
    		
    		logger.log(Level.INFO, "Response code: "+ conn.getResponseCode());
    		logger.log(Level.INFO, "Output from Server ....");
    		logger.log(Level.INFO, "ResponseMessage:" + conn.getResponseMessage());
    		logger.log(Level.INFO, "ContentType: " + conn.getContentType());
    		
    		InputStream resStream = conn.getInputStream();
            String result = new String();
            
            BufferedReader in = new BufferedReader(new InputStreamReader(resStream));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                result += inputLine;
            }			
            logger.log(Level.INFO, "result:" + result);
            
            String[] resultAuth = result.split(",");
            String token = resultAuth[0].substring(19, resultAuth[0].length() - 1).trim();
            logger.log(Level.INFO, "Google Token updated: " + token);
            return token;	
		} catch (Exception e) {
			logger.log(Level.WARNING, "Error trying to refresh authentication token", e);
			throw e;
		}
		
	}

	private String doQueyAdwordsCall1(String token) {
		logger.log(Level.INFO, " ---- Init of processing AdWords Call1 Query----");
				
	            String result = new String();
		    	HttpsURLConnection conn = null;
		    	try {
					String body = buildSoapString();	    		
		    		conn = buildConnectionObject(token);
		    		OutputStream os = conn.getOutputStream();
		    		os.write(body.getBytes());
		    		os.flush();
		    		
		    		logger.log(Level.INFO, "response code: "+ conn.getResponseCode());
		    		logger.log(Level.INFO, "Output from Server ....");
		    		logger.log(Level.INFO, "ResponseMessage:" + conn.getResponseMessage());
		    		logger.log(Level.INFO, "ContentType: " + conn.getContentType());
		    		logger.log(Level.INFO, "RequestMethod: " + conn.getRequestMethod());
		    		
		    		InputStream resStream = conn.getInputStream();
		            BufferedReader in = new BufferedReader(new InputStreamReader(resStream));
		            String inputLine;
		            while ((inputLine = in.readLine()) != null) {
		                result += inputLine;
		            }
		            logger.log(Level.INFO, "End of processing AdWrds Call1 Query. \n" + "Result: " + result);	            
	            return result;
	    	} catch (Exception e) {
	    		logger.log(Level.WARNING, "Error trying to read result to query", e);
	    	} finally{
	    		conn.disconnect();	
	    	}
	    	return result;
	}


	private HttpsURLConnection buildConnectionObject(String token)
			throws MalformedURLException, IOException, ProtocolException {
		URL url = new URL("https://adwords.google.com/api/adwords/cm/v201506/CampaignService");
		HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
		conn.setDoOutput(true);
		conn.setDoInput(true);
		conn.setInstanceFollowRedirects( false );
		conn.setRequestMethod( "POST" );

		conn.setRequestProperty( "Content-Type", "application/x-www-form-urlencoded"); 
		conn.setRequestProperty("Accept", "application/json");
		conn.setRequestProperty( "charset", "utf-8");
		conn.setRequestProperty("Authorization", "Bearer " + token);
		
		conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded"); 
		conn.setRequestProperty("Accept-Encoding", "text/xml"); 
		conn.setRequestProperty("User-Agent", "Apache-HttpClient/4.1.1"); 
		conn.setRequestProperty("Host", "adwords.google.com"); 
		conn.setRequestProperty("Cache-Control", "no-cache"); 
		conn.setRequestProperty("Pragma", "no-cache"); 
		conn.setRequestProperty("SOAPAction", "https://adwords.google.com/api/adwords/cm/v201506/CampaignService");
		conn.setRequestProperty("POST", "/api/adwords/cm/v201506/CampaignService HTTP/1.1");
		conn.setRequestProperty( "Content-Length", "2000");
		conn.setUseCaches( false );               
		conn.setRequestProperty("Connection", "Keep-Alive");
		conn.setRequestProperty("Proxy-Connection", "Keep-Alive");
		return conn;
	}


	private String buildSoapString() {
		
		String body= "<?xml version=\"1.0\" encoding=\"utf-8\"?><soapenv:Envelope "
				+ "xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" "
				+ "xmlns:v20=\"https://adwords.google.com/api/adwords/cm/v201506\">" +
				buildHeaderEnv() + 
				buildBodyEnv() + 
				"</soapenv:Envelope>";
		return body;
	}

	private String buildBodyEnv() {
		String bodyEnv = "<soapenv:Body>"+
				"<v20:get>"+
				"<!--Optional:-->"+
				"<v20:serviceSelector>"+
					"<!--Zero or more repetitions:-->"+
					"<v20:fields>" + QueryAdwordsDataEnum.FIELDS.getValue() + "</v20:fields>"+
					"<!--Zero or more repetitions:-->"+
					"<v20:predicates>"+
					"<!--Optional:-->"+
					"<v20:field>" + QueryAdwordsDataEnum.FIELDS.getValue() + "</v20:field>"+
					"<!--Optional:-->" +
					"<v20:operator>" + QueryAdwordsDataEnum.OPERATOR.getValue() + "</v20:operator>"+
					"<!--Zero or more repetitions:-->"+
					"<v20:values>" + QueryAdwordsDataEnum.VALUES.getValue() + "</v20:values>"+
					"</v20:predicates>" +
					"<!--Optional:-->" +
					"<v20:dateRange>" +
					"<!--Optional:-->" +
					"<v20:min>" + QueryAdwordsDataEnum.MIN.getValue() + "</v20:min>"+
					"<!--Optional:-->"+
					"<v20:max>" + QueryAdwordsDataEnum.MAX.getValue() + "</v20:max>"+
					"</v20:dateRange>"+
					"<!--Zero or more repetitions:-->"+
					"<v20:ordering>"+
					"<!--Optional:-->"+
					"<v20:field>" + QueryAdwordsDataEnum.FIELDS.getValue() + "</v20:field>"+
					"<!--Optional:-->"+
					"<v20:sortOrder>" + QueryAdwordsDataEnum.SORT_ORDER.getValue() + "</v20:sortOrder>"+
					"</v20:ordering>"+
					"<!--Optional:-->"+
					"<v20:paging>"+
					"<!--Optional:-->"+
					"<v20:startIndex>"+1+"</v20:startIndex>"+
					"<!--Optional:-->"+
					"<v20:numberResults>"+10+"</v20:numberResults>"+
					"</v20:paging>"+
				"</v20:serviceSelector>"+
				"</v20:get>"+
				"</soapenv:Body>";
		return bodyEnv;
	}

	private String buildHeaderEnv() {
		String headerEnv = "<soapenv:Header>" +
				"<v20:RequestHeader>" +
				"<v20:clientCustomerId>" + AuthDataEnum.CLIENT_CUSTOMER_ID.getValue() + "</v20:clientCustomerId>" +
				"<v20:developerToken>" + AuthDataEnum.DEVELOPER_TOKEN.getValue() + "</v20:developerToken>" +
				"<v20:userAgent>" + 
				QueryAdwordsDataEnum.USER_AGENT.getValue() +
				"</v20:userAgent>" +
				"</v20:RequestHeader>" +
				"</soapenv:Header>";
		return headerEnv;
	}


	/**
	 * Method to config proxy, put values into the System property using the Enum configuration.
	 */
	private void configProxy() {
		System.setProperty(ProxyconfigEnum.getProxyConfigEnumByKey("https.proxyHost").getKey(), 
				ProxyconfigEnum.getProxyConfigEnumByKey("https.proxyHost").getValue());
		System.setProperty(ProxyconfigEnum.getProxyConfigEnumByKey("https.proxyPort").getKey(), 
				ProxyconfigEnum.getProxyConfigEnumByKey("https.proxyPort").getValue());
		System.setProperty(ProxyconfigEnum.getProxyConfigEnumByKey("http.proxyUser").getKey(), 
				ProxyconfigEnum.getProxyConfigEnumByKey("http.proxyUser").getValue());
		System.setProperty(ProxyconfigEnum.getProxyConfigEnumByKey("http.proxyPassword").getKey(), 
				ProxyconfigEnum.getProxyConfigEnumByKey("http.proxyPassword").getValue());
		System.setProperty(ProxyconfigEnum.getProxyConfigEnumByKey("jsse.enableSNIExtension").getKey(), 
				ProxyconfigEnum.getProxyConfigEnumByKey("jsse.enableSNIExtension").getValue());
		
    	Authenticator.setDefault(
    			   new Authenticator() {
    			      public PasswordAuthentication getPasswordAuthentication() {
    			         return new PasswordAuthentication(
    			        		 ProxyconfigEnum.getProxyConfigEnumByKey("http.proxyUser").getValue(), 
    			        		 ProxyconfigEnum.getProxyConfigEnumByKey("http.proxyPassword").getValue().toCharArray());
    			      }
    			   }
    			);		
	}
	
}
